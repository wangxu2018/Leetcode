Leetcode-112.路径总和
给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。
说明: 叶子节点是指没有子节点的节点。
示例: 
给定如下二叉树，以及目标和 sum = 22，
              5
             / \
            4   8
           /   / \
          11  13  4
         /  \      \
        7    2      1

返回 true, 因为存在目标和为 22 的根节点到叶子节点的路径 5->4->11->2。
思路：递归依次先序遍历所有路径，判断路径中是否出现和为sum的路径，若是直接返回true。
代码：
class Solution {
public:
    void preorder(bool &flag, TreeNode* root, int now_sum, int sum){
       //有flag相当于剪枝的过程，把不合适的直接去掉，不访问。 
if(root == NULL || flag == true){
            return;
        }
        now_sum = now_sum + root->val;
        if(now_sum == sum && root->left == NULL && root->right == NULL){
            flag = true;
            return;
        }
        preorder(flag, root->left, now_sum, sum);
        preorder(flag, root->right, now_sum, sum);
        now_sum = now_sum - root->val;
    }
    bool hasPathSum(TreeNode* root, int sum) {
        bool flag = false;
        preorder(flag, root, 0, sum);
        return flag;
    }
};
