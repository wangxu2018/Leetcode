## Leetcode-449.序列化和反序列化二叉搜索树
序列化是将数据结构或对象转换为一系列位的过程，以便它可以存储在文件或内存缓冲区中，或通过网络连接链路传输，以便稍后在同一个或另一个计算机环境中重建。
设计一个算法来序列化和反序列化二叉搜索树。 对序列化/反序列化算法的工作方式没有限制。 您只需确保二叉搜索树可以序列化为字符串，并且可以将该字符串反序列化为最初的二叉搜索树。
编码的字符串应尽可能紧凑。
注意：不要使用类成员/全局/静态变量来存储状态。 你的序列化和反序列化算法应该是无状态的。

**思路**：
先编码，先序遍历读取树中的结点，依次存放成字符串，并且结点之间用#隔开，其中结点中原先整形的数值全部转为字符串类型。
再依次解码，把数值转为结点依次生成的树的结点，然后按照二叉搜索的规则，小大的数值插在其左边，大的数值插在其右边生成二叉排序树。
**代码**：

    /**
     * Definition for a binary tree node.
     * struct TreeNode {
     *     int val;
     *     TreeNode *left;
     *     TreeNode *right;
     *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
     * };
     */
    class Codec {
    public:
        void change_int_to_string(int num, string& temp){
            while(num > 0){
                temp.insert(temp.begin(), (num % 10) + '0');
                num = num / 10;
            }
            temp += '#';
        }
        void preorder(TreeNode* root, string& data){
            string temp;
            if(root == NULL){
                return;
            }
            change_int_to_string(root->val, temp);
            data += temp;
            preorder(root->left, data);
            preorder(root->right, data);
            
        }
        // Encodes a tree to a single string.
        string serialize(TreeNode* root) {
            string data;
            preorder(root, data);
            return data;
        }
        
        void insert_tree(TreeNode* root, TreeNode* temp){
            if(temp->val < root->val){
                if(root->left == NULL){
                    root->left = temp;
                }else{
                    insert_tree(root->left, temp);
                }
            }else{
                if(root->right == NULL){
                    root->right = temp;
                }else{
                    insert_tree(root->right, temp);
                }
            }
        }
        // Decodes your encoded data to tree.
        TreeNode* deserialize(string data) {
            if(data.size() == 0){
                return NULL;
            }
            vector<TreeNode* > nodes;
            int num = 0;
            for(int i = 0; i < data.size(); i++){
                if(data[i] != '#'){
                    num = num * 10 + data[i] - '0'; 
                }else{
                    nodes.push_back(new TreeNode(num));
                    num = 0;
                }
            }
            for(int i = 1; i < nodes.size(); i++){
                insert_tree(nodes[0], nodes[i]);
            }
            return nodes[0];
        } 
    };
